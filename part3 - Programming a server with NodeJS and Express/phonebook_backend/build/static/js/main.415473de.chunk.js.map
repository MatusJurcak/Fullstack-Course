{"version":3,"sources":["people.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Filter","props","value","newFilter","onChange","handleFilterChange","Notification","message","className","ErrorNotification","PersonForm","onSubmit","addName","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","namesToShow","removePerson","map","person","name","number","onClick","App","useState","persons","setPeople","setNewName","setNewNumber","setNewFilter","errorMessage","setErrorMessage","setMessage","useEffect","personService","initialPeople","filter","toUpperCase","includes","event","target","preventDefault","window","confirm","p","find","n","changedPerson","returnedPerson","x","catch","error","setTimeout","personObject","concat","ReactDOM","render","document","getElementById"],"mappings":"6LACMA,EAAU,eAsBD,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB9B,EAfA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAACG,GAEZ,OADgBP,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BQ,IAC5BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACC,GAEZ,OADgBL,IAAMS,IAAN,UAAaV,EAAb,YAAwBM,EAAUE,IAAMF,GACzCH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,OCjBvCM,EAAS,SAACC,GACd,OACE,oDACmB,uBAAOC,MAAOD,EAAME,UAAWC,SAAUH,EAAMI,yBAKhEC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKC,UAAU,UAAf,SACGD,KAKDE,EAAoB,SAAC,GAAiB,IAAfF,EAAc,EAAdA,QAC3B,OAAgB,OAAZA,EACK,KAIP,qBAAKC,UAAU,QAAf,SACGD,KAKDG,EAAa,SAACT,GAClB,OACE,uBAAMU,SAAUV,EAAMW,QAAtB,UACE,yCACQ,uBAAOV,MAAOD,EAAMY,QAAST,SAAUH,EAAMa,sBAErD,2CACU,uBAAOZ,MAAOD,EAAMc,UAAWX,SAAUH,EAAMe,wBAEzD,8BACE,wBAAQC,KAAK,SAAb,uBAMFC,EAAU,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC9B,OACE,6BACGD,EAAYE,KAAI,SAAAC,GAAM,OACrB,+BAAuBA,EAAOC,KAA9B,IAAqCD,EAAOE,OAA5C,IAAoD,wBAAQC,QAAS,kBAAML,EAAaE,IAApC,sBAA3CA,EAAOC,YA6GTG,EAvGH,WACV,MAA6BC,mBAAS,IAAtC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOd,EAAP,KAAgBiB,EAAhB,KACA,EAAkCH,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBgB,EAAlB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOxB,EAAP,KAAkB6B,EAAlB,KACA,EAAwCL,mBAAS,MAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA8BP,mBAAS,MAAvC,mBAAOpB,EAAP,KAAgB4B,EAAhB,KAEAC,qBAAU,WACRC,IAEG7C,MAAK,SAAA8C,GACJT,EAAUS,QAEb,IAEH,IAYMnB,EAA6B,KAAdhB,EACjByB,EACAA,EAAQW,QAAO,SAAAjB,GAAM,OAAIA,EAAOC,KAAKiB,cAAcC,SAAStC,EAAUqC,kBA2D1E,OACE,gCACE,2CACA,cAAC,EAAD,CAAcjC,QAASA,IACvB,cAAC,EAAD,CAAmBA,QAAS0B,IAC5B,cAAC,EAAD,CAAQ9B,UAAWA,EAAWE,mBAtEP,SAACqC,GAC1BV,EAAaU,EAAMC,OAAOzC,UAsExB,2CACA,cAAC,EAAD,CAAYU,QAhEA,SAAC8B,GAGf,GAFAA,EAAME,iBACMhB,EAAQP,KAAI,SAAAC,GAAM,OAAIA,EAAOC,QAChCkB,SAAS5B,IAkBhB,GAAIgC,OAAOC,QAAP,UAAkBjC,EAAlB,2EAAoG,CACtG,IAAMkC,EAAInB,EAAQoB,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAKiB,gBAAkB3B,EAAQ2B,iBACvDU,EAAa,2BAAQH,GAAR,IAAWvB,OAAQT,IAEtCsB,EACUa,GACP1D,MAAK,SAAA2D,GACJtB,EAAUD,EAAQP,KAAI,SAAA+B,GAAC,OAAIA,EAAEvD,KAAOkD,EAAElD,GAAKuD,EAAID,SAEhDE,OAAM,SAAAC,GACLpB,EAAgB,kBAAD,OAAmBgB,EAAc3B,KAAjC,0CACfgC,YAAW,WACTrB,EAAgB,QACf,KACHL,EAAUD,EAAQW,QAAO,SAAAU,GAAC,OAAIA,EAAEpD,KAAOqD,EAAcrD,eAhCjC,CAC1B,IAAM2D,EAAe,CACnBjC,KAAMV,EACNW,OAAQT,GAEVsB,EACUmB,GACPhE,MAAK,SAAA2D,GACJtB,EAAUD,EAAQ6B,OAAON,IACzBrB,EAAW,IACXC,EAAa,IACbI,EAAW,SAAD,OAAUqB,EAAajC,OACjCgC,YAAW,WACTpB,EAAW,QACV,UA+CuBtB,QAASA,EAASE,UAAWA,EAAWD,iBAhFjD,SAAC4B,GACxBZ,EAAWY,EAAMC,OAAOzC,QA+EoFc,mBA5EnF,SAAC0B,GAC1BX,EAAaW,EAAMC,OAAOzC,UA4ExB,yCACA,cAAC,EAAD,CAASiB,YAAaA,EAAaC,aAzBlB,SAACE,GAChBuB,OAAOC,QAAP,iBAAyBxB,EAAOC,KAAhC,OACFc,EACUf,EAAOzB,IACdL,MAAK,WACJqC,EAAUD,EAAQW,QAAO,SAAAQ,GAAC,OAAIA,EAAElD,KAAOyB,EAAOzB,OAC9CqC,EAAgB,GAAD,OAAIZ,EAAOC,KAAX,kCACfgC,YAAW,WACTrB,EAAgB,QACf,e,MC3IbwB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.415473de.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (newObject) => {\r\n    const request = axios.put(`${baseUrl}/${newObject.id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, remove, update }","import React, { useState, useEffect } from 'react'\nimport personService from './people'\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with<input value={props.newFilter} onChange={props.handleFilterChange}></input>\n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"message\">\n      {message}\n    </div>\n  )\n}\n\nconst ErrorNotification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addName}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = ({ namesToShow, removePerson }) => {\n  return (\n    <ul>\n      {namesToShow.map(person =>\n        <li key={person.name}>{person.name} {person.number} <button onClick={() => removePerson(person)}>delete</button></li>\n      )}\n    </ul>\n  )\n}\n\nconst App = () => {\n  const [persons, setPeople] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [message, setMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPeople => {\n        setPeople(initialPeople)\n      })\n  }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const namesToShow = (newFilter === '')\n    ? persons\n    : persons.filter(person => person.name.toUpperCase().includes(newFilter.toUpperCase()))\n\n  const addName = (event) => {\n    event.preventDefault()\n    const idk = persons.map(person => person.name)\n    if (!idk.includes(newName)) {\n      const personObject = {\n        name: newName,\n        number: newNumber,\n      }\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPeople(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setMessage(`Added ${personObject.name}`)\n          setTimeout(() => {\n            setMessage(null)\n          }, 3000)\n        })\n    }\n    else {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const p = persons.find(n => n.name.toUpperCase() === newName.toUpperCase())\n        const changedPerson = { ...p, number: newNumber }\n\n        personService\n          .update(changedPerson)\n          .then(returnedPerson => {\n            setPeople(persons.map(x => x.id !== p.id ? x : returnedPerson))\n          })\n          .catch(error => {\n            setErrorMessage(`Information of ${changedPerson.name} has already been removed from server`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 3000)\n            setPeople(persons.filter(n => n.id !== changedPerson.id))\n          })\n      }\n    }\n  }\n\n  const removePerson = (person) => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .remove(person.id)\n        .then(() => {\n          setPeople(persons.filter(p => p.id !== person.id))\n          setErrorMessage(`${person.name} has been deleted from server`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 3000)\n        })\n    }\n  }\n\n\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={message} />\n      <ErrorNotification message={errorMessage} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <h1>add a new</h1>\n      <PersonForm addName={addName} newName={newName} newNumber={newNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\n      <h1>Numbers</h1>\n      <Persons namesToShow={namesToShow} removePerson={removePerson} />\n    </div>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}